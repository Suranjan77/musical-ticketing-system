/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.musical.ticketing.view.components;

import javax.swing.JLabel;
import org.musical.ticketing.domain.Musical;
import org.musical.ticketing.service.MusicalsService;
import org.musical.ticketing.view.messaging.EventListener;
import org.musical.ticketing.view.messaging.ListenerRegistry;
import org.musical.ticketing.view.messaging.events.MusicalSearchEvent;

/**
 * @author suranjanpoudel
 */
public class BrowseMusicalsPane extends javax.swing.JPanel implements EventListener {

  private final MusicalsService musicalsService;
  private final Long customerId;

  /** Creates new form BrowseMusicalsPane */
  public BrowseMusicalsPane(Long customerId) {
    register();
    initComponents();
    this.musicalsService = new MusicalsService();
    this.customerId = customerId;
    setVisible(true);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
    setLocation(new java.awt.Point(20, 20));
    setLayout(new java.awt.GridLayout(0, 3, 40, 40));
  } // </editor-fold>//GEN-END:initComponents

  public void showMusicals() {
    for (long i = 0; i < 20; i++) {
      var musicalComponent =
          new BriefMusicalComponent(
              new Musical(
                  i, "Musical-" + i, "Musical-desc-" + i, "theatre-" + i, 5000L, "test_image.jpeg"),
              customerId,
              true);
      add(musicalComponent);
    }
  }

  public void searchAndShowMusicals(String query) {
    this.removeAll();
    this.revalidate();
    this.repaint();
   
    var musicals = musicalsService
        .searchMusicals(query);
    
    if(musicals.isEmpty()) {
        JLabel label = new JLabel();
        label.setText("No Musicals found for query: " + query);
        add(label);
    } else {
        musicals.forEach(musical -> add(new BriefMusicalComponent(musical, customerId,true)));
    }
  }

    @Override
    public void handleEvent(Object event) {
        if(event instanceof MusicalSearchEvent searchEvent) {
            searchAndShowMusicals(searchEvent.query());
        }
    }

    @Override
    public void register() {
        ListenerRegistry.register(MusicalSearchEvent.class, this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
