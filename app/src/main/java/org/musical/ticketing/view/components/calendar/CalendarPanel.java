/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.musical.ticketing.view.components.calendar;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.YearMonth;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.musical.ticketing.util.DateTimeUtils;

/**
 *
 * @author suranjanpoudel
 */
public class CalendarPanel extends javax.swing.JPanel {

    private YearMonth currentYearMonth;
    
    /**
     * Creates new form CalendarView
     */
    public CalendarPanel() {
        initComponents();
        drawCalendar(YearMonth.of(LocalDate.now().getYear(), LocalDate.now().getMonthValue()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(0, 7));
    }// </editor-fold>//GEN-END:initComponents


    private void drawCalendar(YearMonth yearMonth) {
        this.currentYearMonth = yearMonth;
        List<CalendarCell> calendarCells = new ArrayList<>();

        LocalDate[] monthDates = DateTimeUtils.getDaysOfMonth(currentYearMonth);
        if (monthDates.length != 0) {
            var dayOfWeek = monthDates[0].getDayOfWeek().getValue(); //3

            for (int i = 0; i < 7; i++) {
                calendarCells.add(new CalendarCell(new CellData(false, DayOfWeek.of(i + 1).getDisplayName(TextStyle.SHORT, Locale.UK), true, null, true, null)));
            }

            for (int i = 0; i < dayOfWeek - 1; i++) { //2
                calendarCells.add(new CalendarCell(new CellData(false, "", false, null, true, null)));
            }

            for (var monthDate : monthDates) {
                boolean shouldDisable = false;
                if (monthDate.isBefore(LocalDate.now())) {
                    shouldDisable = true;
                }
                calendarCells.add(new CalendarCell(new CellData(false, String.valueOf(monthDate.getDayOfMonth()), false, monthDate, shouldDisable, null)));
            }
        }

        calendarCells.forEach(this::add);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
