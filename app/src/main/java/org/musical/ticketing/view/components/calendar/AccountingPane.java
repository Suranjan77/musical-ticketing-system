/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.musical.ticketing.view.components.calendar;

import javax.swing.JFormattedTextField;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultFormatter;
import org.musical.ticketing.domain.ShowTime;
import org.musical.ticketing.domain.Ticket;
import org.musical.ticketing.domain.TicketType;
import org.musical.ticketing.domain.TicketTypeEnum;
import org.musical.ticketing.repositories.ShowTimesRepository;
import org.musical.ticketing.repositories.TicketTypeRepository;
import org.musical.ticketing.repositories.TicketsRepository;
import org.musical.ticketing.util.ErrorUtils;
import org.musical.ticketing.view.messaging.ListenerRegistry;
import org.musical.ticketing.view.messaging.events.PurchaseEvent;
import org.musical.ticketing.view.models.TicketAccountingData;

/**
 *
 * @author suranjanpoudel
 */
public class AccountingPane extends javax.swing.JPanel {

    private final TicketTypeRepository ticketTypeRepository;
    private final TicketsRepository ticketsRepository;
    private final ShowTimesRepository showTimesRepository;
    private ShowTime showTime;
    private Long customerId;

    /**
     * Creates new form TotalCostPane
     */
    public AccountingPane() {
        this.showTimesRepository = new ShowTimesRepository();
        this.ticketTypeRepository = new TicketTypeRepository();
        this.ticketsRepository = new TicketsRepository();
        initComponents();

        ((DefaultFormatter) ((JFormattedTextField) adultTicketCountSpinner.getEditor().getComponent(0)).getFormatter()).setCommitsOnValidEdit(true);
        ((DefaultFormatter) ((JFormattedTextField) seniorTicketCountSpinner.getEditor().getComponent(0)).getFormatter()).setCommitsOnValidEdit(true);
        ((DefaultFormatter) ((JFormattedTextField) studentTicketCountSpinner.getEditor().getComponent(0)).getFormatter()).setCommitsOnValidEdit(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        accountingPanel = new javax.swing.JPanel();
        seatsRemainingLabel = new javax.swing.JLabel();
        seatsRemainingCountLabel = new javax.swing.JLabel();
        adultLabel = new javax.swing.JLabel();
        adultTicketCountSpinner = new javax.swing.JSpinner();
        seniorLabel = new javax.swing.JLabel();
        seniorTicketCountSpinner = new javax.swing.JSpinner();
        studentLabel = new javax.swing.JLabel();
        studentTicketCountSpinner = new javax.swing.JSpinner();
        totalLabel = new javax.swing.JLabel();
        totalPriceLabel = new javax.swing.JLabel();
        purchaseButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setLayout(new java.awt.GridBagLayout());

        accountingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tickets", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font(".AppleSystemUIFont", 1, 14))); // NOI18N
        accountingPanel.setLayout(new java.awt.GridLayout(0, 2, 0, 2));

        seatsRemainingLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        seatsRemainingLabel.setText("    Remaining Seats");
        accountingPanel.add(seatsRemainingLabel);

        seatsRemainingCountLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        seatsRemainingCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        seatsRemainingCountLabel.setText("0");
        accountingPanel.add(seatsRemainingCountLabel);

        adultLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        adultLabel.setText("    Adult");
        accountingPanel.add(adultLabel);

        adultTicketCountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        adultTicketCountSpinner.setMaximumSize(new java.awt.Dimension(50, 40));
        adultTicketCountSpinner.setMinimumSize(new java.awt.Dimension(40, 22));
        adultTicketCountSpinner.setPreferredSize(new java.awt.Dimension(40, 22));
        accountingPanel.add(adultTicketCountSpinner);

        seniorLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        seniorLabel.setText("    Senior");
        accountingPanel.add(seniorLabel);

        seniorTicketCountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        seniorTicketCountSpinner.setMaximumSize(new java.awt.Dimension(50, 40));
        seniorTicketCountSpinner.setMinimumSize(new java.awt.Dimension(40, 22));
        seniorTicketCountSpinner.setPreferredSize(new java.awt.Dimension(40, 22));
        accountingPanel.add(seniorTicketCountSpinner);

        studentLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        studentLabel.setText("    Student");
        accountingPanel.add(studentLabel);

        studentTicketCountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        studentTicketCountSpinner.setMaximumSize(new java.awt.Dimension(20, 40));
        studentTicketCountSpinner.setMinimumSize(new java.awt.Dimension(20, 22));
        studentTicketCountSpinner.setPreferredSize(new java.awt.Dimension(20, 22));
        accountingPanel.add(studentTicketCountSpinner);

        totalLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLabel.setText("    Total Price");
        totalLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        accountingPanel.add(totalLabel);

        totalPriceLabel.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        totalPriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalPriceLabel.setText("Â£ 0");
        totalPriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        accountingPanel.add(totalPriceLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 30);
        add(accountingPanel, gridBagConstraints);

        purchaseButton.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 14)); // NOI18N
        purchaseButton.setText("Purchase");
        purchaseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseButtonMouseClicked(evt);
            }
        });
        purchaseButton.addActionListener(this::purchaseButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 25, 0, 25);
        add(purchaseButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void purchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseButtonActionPerformed

    private void purchaseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseButtonMouseClicked
        int adultTicketCount = (int) adultTicketCountSpinner.getValue();
        int seniorTicketCount = (int) seniorTicketCountSpinner.getValue();
        int studentTicketCount = (int) studentTicketCountSpinner.getValue();

        if (adultTicketCount + seniorTicketCount + studentTicketCount == 0) {
            ErrorUtils.showErrorPane("Select at least 1 ticket to purchase");
        } else if (showTime == null) {
            ErrorUtils.showErrorPane("Select time first");
        } else {

            int seats = showTime.availableSeatsCount();
            for (int i = 0; i < adultTicketCount; i++) {
                var ticket = new Ticket(null, customerId, showTime.musicalId(), showTime.id(), seats--, adultTicketType.id());
                ticketsRepository.save(ticket);
            }

            for (int i = 0; i < seniorTicketCount; i++) {
                var ticket = new Ticket(null, customerId, showTime.musicalId(), showTime.id(), seats--, seniorTicketType.id());
                ticketsRepository.save(ticket);
            }

            for (int i = 0; i < studentTicketCount; i++) {
                var ticket = new Ticket(null, customerId, showTime.musicalId(), showTime.id(), seats--, studentTicketType.id());
                ticketsRepository.save(ticket);
            }

            this.showTime = showTimesRepository.updateSeatCount(showTime.id(), seats);

            ListenerRegistry.notify(new PurchaseEvent(
                    showTime,
                    customerId,
                    new TicketAccountingData(
                            adultTicketCount,
                            seniorTicketCount,
                            studentTicketCount,
                            adultTicketType.price(),
                            seniorTicketType.price(),
                            studentTicketType.price()
                    )
            ));
        }
    }//GEN-LAST:event_purchaseButtonMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountingPanel;
    private javax.swing.JLabel adultLabel;
    private javax.swing.JSpinner adultTicketCountSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton purchaseButton;
    private javax.swing.JLabel seatsRemainingCountLabel;
    private javax.swing.JLabel seatsRemainingLabel;
    private javax.swing.JLabel seniorLabel;
    private javax.swing.JSpinner seniorTicketCountSpinner;
    private javax.swing.JLabel studentLabel;
    private javax.swing.JSpinner studentTicketCountSpinner;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel totalPriceLabel;
    // End of variables declaration//GEN-END:variables

    void setSelectedTimeSlot(ShowTime showTime, Long customerId) {
        this.showTime = showTime;
        this.customerId = customerId;

        Long musicalId = showTime.musicalId();

        seatsRemainingCountLabel.setText(String.valueOf(showTime.availableSeatsCount()));

        var adultTicketData = ticketTypeRepository.findByMusicalIdAndType(musicalId, TicketTypeEnum.ADULT);
        var seniorTicketData = ticketTypeRepository.findByMusicalIdAndType(musicalId, TicketTypeEnum.SENIOR);
        var studentTicketData = ticketTypeRepository.findByMusicalIdAndType(musicalId, TicketTypeEnum.STUDENT);

        adultTicketData.ifPresent(a -> this.adultTicketType = a);
        seniorTicketData.ifPresent(a -> this.seniorTicketType = a);
        studentTicketData.ifPresent(a -> this.studentTicketType = a);

        adultTicketCountSpinner.addChangeListener(e -> updateTicketCountAndPrice(true, false, false));
        seniorTicketCountSpinner.addChangeListener(e -> updateTicketCountAndPrice(false, true, false));
        studentTicketCountSpinner.addChangeListener(e -> updateTicketCountAndPrice(false, false, true));
    }

    private TicketType adultTicketType;
    private TicketType seniorTicketType;
    private TicketType studentTicketType;

    private boolean isShowingError;
    private int lastValidAdultTicketCount = 0;
    private int lastValidSeniorTicketCount = 0;
    private int lastValidStudentTicketCount = 0;

    private void updateTicketCountAndPrice(boolean isAdultTicket, boolean isSeniorTicket, boolean isStudentTicket) {

        if (isShowingError) {
            return; // Prevent multiple error panes from showing up at once
        }

        int adultTicket = (int) adultTicketCountSpinner.getValue();
        int seniorTicket = (int) seniorTicketCountSpinner.getValue();
        int studentTicket = (int) studentTicketCountSpinner.getValue();

        int totalTickets = adultTicket + seniorTicket + studentTicket;

        if (totalTickets > showTime.availableSeatsCount()) {
            if (!isShowingError) {
                isShowingError = true;
                ErrorUtils.showErrorPane("Seat count exceeded.");
                if (isAdultTicket) {
                    SwingUtilities.invokeLater(() -> {
                        adultTicketCountSpinner.setValue(adultTicket - 1);
                        isShowingError = false;
                    });
                }
                if (isSeniorTicket) {
                    SwingUtilities.invokeLater(() -> {
                        seniorTicketCountSpinner.setValue(seniorTicket - 1);
                        isShowingError = false;
                    });
                }
                if (isStudentTicket) {
                    SwingUtilities.invokeLater(() -> {
                        studentTicketCountSpinner.setValue(studentTicket - 1);
                        isShowingError = false;
                    });
                }
            }
        } else {
            lastValidAdultTicketCount = adultTicket;
            lastValidSeniorTicketCount = seniorTicket;
            lastValidStudentTicketCount = studentTicket;

            int remainingSeats = showTime.availableSeatsCount() - totalTickets;
            seatsRemainingCountLabel.setText(String.valueOf(remainingSeats));

            double total = adultTicket * adultTicketType.price()
                    + seniorTicket * seniorTicketType.price()
                    + studentTicket * studentTicketType.price();

            totalPriceLabel.setText("Â£ " + total);
        }
    }

}
